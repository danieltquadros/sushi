// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  phone     String?
  address   String?
  avatar    String?    @default("default.jpg")
  roles     String[]
  orders    Order[]
  cartItems CartItem[]
  addresses Address[] // Relacionamento com a tabela de endereços
}

model Product {
  id          String              @id @default(uuid())
  name        String
  description String?
  price       Float?
  imageUrl    String?
  stock       Int?
  ingredients ProductIngredient[] // Relacionamento com a tabela intermediária
  cartItems   CartItem[]
  orders      OrderProduct[]
}

model Ingredient {
  id          String              @id @default(uuid())
  name        String
  description String?
  products    ProductIngredient[] // Relacionamento com a tabela intermediária
}

// Tabela intermediária para o relacionamento many-to-many
model ProductIngredient {
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@id([productId, ingredientId]) // Chave primária composta
}

model CartItem {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  quantity  Int
}

model Ticket {
  id      String    @id @default(uuid())
  name    String
  phone   String
  order   Order?
  Address Address[]
}

model Address {
  id        String  @id @default(uuid())
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  user      User?   @relation(fields: [userId], references: [id]) // Relacionamento opcional com o usuário
  userId    String?
  ticket    Ticket? @relation(fields: [ticketId], references: [id]) // Relacionamento opcional com o ticket
  ticketId  String?
  isDefault Boolean @default(false) // Marca o endereço como o endereço padrão do usuário
}

model Order {
  id         String         @id @default(uuid())
  user       User?          @relation(fields: [userId], references: [id])
  userId     String?
  products   OrderProduct[]
  ticket     Ticket?        @relation(fields: [ticketId], references: [id])
  ticketId   String?        @unique // Campo ticketId adicionado
  totalPrice Float
  createdAt  DateTime       @default(now())
  status     String
}

// Tabela intermediária para o relacionamento many-to-many entre Order e Product
model OrderProduct {
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([orderId, productId]) // Chave primária composta
}
